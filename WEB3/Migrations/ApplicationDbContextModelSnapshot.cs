// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WEB3.Data;

#nullable disable

namespace WEB3.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AppointmentsEmployees", b =>
                {
                    b.Property<int>("appointmentsappointmentid")
                        .HasColumnType("integer");

                    b.Property<int>("employeesemployeeid")
                        .HasColumnType("integer");

                    b.HasKey("appointmentsappointmentid", "employeesemployeeid");

                    b.HasIndex("employeesemployeeid");

                    b.ToTable("AppointmentsEmployees");
                });

            modelBuilder.Entity("AppointmentsServices", b =>
                {
                    b.Property<int>("appointmentsappointmentid")
                        .HasColumnType("integer");

                    b.Property<int>("servicesserviceid")
                        .HasColumnType("integer");

                    b.HasKey("appointmentsappointmentid", "servicesserviceid");

                    b.HasIndex("servicesserviceid");

                    b.ToTable("AppointmentsServices");
                });

            modelBuilder.Entity("WEB3.Models.Admin", b =>
                {
                    b.Property<int>("adminid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("adminid"));

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("adminid");

                    b.ToTable("admin", (string)null);
                });

            modelBuilder.Entity("WEB3.Models.AppointmentStatus", b =>
                {
                    b.Property<string>("approvalstatus")
                        .HasColumnType("text");

                    b.Property<int>("adminid")
                        .HasColumnType("integer");

                    b.HasKey("approvalstatus");

                    b.HasIndex("adminid");

                    b.ToTable("appointmentstatus", (string)null);
                });

            modelBuilder.Entity("WEB3.Models.Appointments", b =>
                {
                    b.Property<int>("appointmentid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("appointmentid"));

                    b.Property<DateTime>("appointmentdatetime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("approvalstatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("customerid")
                        .HasColumnType("integer");

                    b.Property<int>("employeeid")
                        .HasColumnType("integer");

                    b.Property<int>("process")
                        .HasColumnType("integer");

                    b.Property<int>("serviceid")
                        .HasColumnType("integer");

                    b.Property<int>("totalprice")
                        .HasColumnType("integer");

                    b.HasKey("appointmentid");

                    b.HasIndex("customerid");

                    b.HasIndex("employeeid");

                    b.HasIndex("serviceid");

                    b.ToTable("appointments", (string)null);
                });

            modelBuilder.Entity("WEB3.Models.Customer", b =>
                {
                    b.Property<int>("customerid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("customerid"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("firstname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isactive")
                        .HasColumnType("boolean");

                    b.Property<string>("lastname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("customerid");

                    b.ToTable("customer", (string)null);
                });

            modelBuilder.Entity("WEB3.Models.CustomerAppointment", b =>
                {
                    b.Property<int>("customerappointmentid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("customerappointmentid"));

                    b.Property<int>("appointmentid")
                        .HasColumnType("integer");

                    b.Property<string>("approvalstatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("customerid")
                        .HasColumnType("integer");

                    b.Property<int>("employeeid")
                        .HasColumnType("integer");

                    b.Property<int>("serviceid")
                        .HasColumnType("integer");

                    b.HasKey("customerappointmentid");

                    b.HasIndex("appointmentid");

                    b.HasIndex("customerid");

                    b.HasIndex("employeeid");

                    b.HasIndex("serviceid");

                    b.ToTable("customerappointments", (string)null);
                });

            modelBuilder.Entity("WEB3.Models.EmployeeAvailability", b =>
                {
                    b.Property<int>("availabilityid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("availabilityid"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.Property<int>("employeeid")
                        .HasColumnType("integer");

                    b.HasKey("availabilityid");

                    b.HasIndex("employeeid");

                    b.ToTable("employeeavailability", (string)null);
                });

            modelBuilder.Entity("WEB3.Models.Employees", b =>
                {
                    b.Property<int>("employeeid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("employeeid"));

                    b.Property<int>("dailyearnings")
                        .HasColumnType("integer");

                    b.Property<string>("expertise")
                        .HasColumnType("text");

                    b.Property<string>("firstname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("lastname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("prolificacy")
                        .HasColumnType("numeric");

                    b.Property<int>("serviceid")
                        .HasColumnType("integer");

                    b.Property<string>("skills")
                        .HasColumnType("text");

                    b.HasKey("employeeid");

                    b.HasIndex("serviceid");

                    b.ToTable("employees", (string)null);
                });

            modelBuilder.Entity("WEB3.Models.Services", b =>
                {
                    b.Property<int>("serviceid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("serviceid"));

                    b.Property<int>("serviceduration")
                        .HasColumnType("integer");

                    b.Property<string>("servicename")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("serviceprice")
                        .HasColumnType("integer");

                    b.HasKey("serviceid");

                    b.ToTable("services", (string)null);
                });

            modelBuilder.Entity("AppointmentsEmployees", b =>
                {
                    b.HasOne("WEB3.Models.Appointments", null)
                        .WithMany()
                        .HasForeignKey("appointmentsappointmentid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WEB3.Models.Employees", null)
                        .WithMany()
                        .HasForeignKey("employeesemployeeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppointmentsServices", b =>
                {
                    b.HasOne("WEB3.Models.Appointments", null)
                        .WithMany()
                        .HasForeignKey("appointmentsappointmentid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WEB3.Models.Services", null)
                        .WithMany()
                        .HasForeignKey("servicesserviceid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WEB3.Models.AppointmentStatus", b =>
                {
                    b.HasOne("WEB3.Models.Admin", "admin")
                        .WithMany("appointmentstatus")
                        .HasForeignKey("adminid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("admin");
                });

            modelBuilder.Entity("WEB3.Models.Appointments", b =>
                {
                    b.HasOne("WEB3.Models.Customer", "customerids")
                        .WithMany("appointments")
                        .HasForeignKey("customerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WEB3.Models.Employees", "employeeids")
                        .WithMany()
                        .HasForeignKey("employeeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WEB3.Models.Services", "serviceids")
                        .WithMany()
                        .HasForeignKey("serviceid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customerids");

                    b.Navigation("employeeids");

                    b.Navigation("serviceids");
                });

            modelBuilder.Entity("WEB3.Models.CustomerAppointment", b =>
                {
                    b.HasOne("WEB3.Models.Appointments", "appointments")
                        .WithMany()
                        .HasForeignKey("appointmentid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WEB3.Models.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("customerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WEB3.Models.Employees", "employees")
                        .WithMany()
                        .HasForeignKey("employeeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WEB3.Models.Services", "services")
                        .WithMany()
                        .HasForeignKey("serviceid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("appointments");

                    b.Navigation("customer");

                    b.Navigation("employees");

                    b.Navigation("services");
                });

            modelBuilder.Entity("WEB3.Models.EmployeeAvailability", b =>
                {
                    b.HasOne("WEB3.Models.Employees", "employeeids")
                        .WithMany()
                        .HasForeignKey("employeeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employeeids");
                });

            modelBuilder.Entity("WEB3.Models.Employees", b =>
                {
                    b.HasOne("WEB3.Models.EmployeeAvailability", "employeeavailability")
                        .WithMany("Employees")
                        .HasForeignKey("serviceid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WEB3.Models.Services", "services")
                        .WithMany("employees")
                        .HasForeignKey("serviceid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("employeeavailability");

                    b.Navigation("services");
                });

            modelBuilder.Entity("WEB3.Models.Admin", b =>
                {
                    b.Navigation("appointmentstatus");
                });

            modelBuilder.Entity("WEB3.Models.Customer", b =>
                {
                    b.Navigation("appointments");
                });

            modelBuilder.Entity("WEB3.Models.EmployeeAvailability", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("WEB3.Models.Services", b =>
                {
                    b.Navigation("employees");
                });
#pragma warning restore 612, 618
        }
    }
}
